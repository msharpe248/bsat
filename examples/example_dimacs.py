"""
DIMACS Format Examples

The DIMACS CNF format is the standard format for SAT solvers,
used in SAT competitions and by industrial tools.

This demonstrates:
- Reading/writing DIMACS files
- Converting between BSAT and DIMACS
- Working with SAT competition benchmarks
- Exporting solutions
"""

import sys
from pathlib import Path
import tempfile

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from bsat import (
    parse_dimacs, to_dimacs, read_dimacs_file, write_dimacs_file,
    parse_dimacs_solution, solution_to_dimacs,
    solve_sat, solve_cdcl, CNFExpression, Clause, Literal
)


def example1_basic_dimacs():
    """Example 1: Basic DIMACS parsing."""
    print("=" * 70)
    print("Example 1: Basic DIMACS Parsing")
    print("=" * 70)

    dimacs_str = """
    c This is a simple SAT problem
    c (x1 ∨ ¬x2) ∧ (x2 ∨ x3) ∧ (¬x1 ∨ ¬x3)
    p cnf 3 3
    1 -2 0
    2 3 0
    -1 -3 0
    """

    print("\nDIMACS input:")
    print(dimacs_str)

    cnf = parse_dimacs(dimacs_str)

    print(f"\nParsed {len(cnf.clauses)} clauses")
    print(f"Variables: {sorted(cnf.get_variables())}")
    print(f"\nCNF: {cnf}")


def example2_generate_dimacs():
    """Example 2: Generate DIMACS from CNF."""
    print("\n" + "=" * 70)
    print("Example 2: Generate DIMACS Format")
    print("=" * 70)

    # Create CNF programmatically
    cnf = CNFExpression([
        Clause([Literal('x1', False), Literal('x2', True), Literal('x3', False)]),
        Clause([Literal('x1', True), Literal('x3', True)]),
        Clause([Literal('x2', False)])
    ])

    print(f"\nOriginal CNF: {cnf}")

    # Convert to DIMACS
    dimacs = to_dimacs(cnf, comments=['Generated by BSAT', 'Example formula'])

    print("\nDIMACS output:")
    print(dimacs)


def example3_file_io():
    """Example 3: Read and write DIMACS files."""
    print("\n" + "=" * 70)
    print("Example 3: DIMACS File I/O")
    print("=" * 70)

    cnf = CNFExpression([
        Clause([Literal('x1', False), Literal('x2', False)]),
        Clause([Literal('x2', True), Literal('x3', False)]),
        Clause([Literal('x1', True), Literal('x3', True)])
    ])

    with tempfile.TemporaryDirectory() as tmpdir:
        filepath = Path(tmpdir) / "example.cnf"

        # Write to file
        print(f"\nWriting to {filepath.name}...")
        write_dimacs_file(cnf, str(filepath), comments=['Example SAT problem'])

        # Read the file
        print(f"Reading from {filepath.name}...")
        with open(filepath, 'r') as f:
            content = f.read()
        print(f"\nFile contents:")
        print(content)

        # Parse it back
        cnf2 = read_dimacs_file(str(filepath))
        print(f"\nParsed {len(cnf2.clauses)} clauses")
        print(f"CNF: {cnf2}")


def example4_solve_dimacs():
    """Example 4: Solve a DIMACS formula."""
    print("\n" + "=" * 70)
    print("Example 4: Solve DIMACS Formula")
    print("=" * 70)

    dimacs = """
    c 3-SAT problem
    p cnf 5 5
    1 2 3 0
    -1 -2 4 0
    -3 -4 5 0
    -1 -4 -5 0
    2 -3 5 0
    """

    print("DIMACS problem:")
    print(dimacs)

    cnf = parse_dimacs(dimacs)

    print("\nSolving with DPLL...")
    solution = solve_sat(cnf)

    if solution:
        print(f"SAT! Solution: {solution}")
        print(f"Verification: {cnf.evaluate(solution)}")
    else:
        print("UNSAT")


def example5_solution_export():
    """Example 5: Export solution in DIMACS format."""
    print("\n" + "=" * 70)
    print("Example 5: Export Solution in DIMACS Format")
    print("=" * 70)

    dimacs = """
    p cnf 4 4
    1 2 0
    -1 3 0
    -2 4 0
    -3 -4 0
    """

    cnf = parse_dimacs(dimacs)

    print("Solving...")
    solution = solve_cdcl(cnf)

    if solution:
        print(f"\nSolution found: {solution}")

        # Export to DIMACS solution format
        dimacs_solution = solution_to_dimacs(solution, satisfiable=True)

        print("\nDIMACS solution format:")
        print(dimacs_solution)

        # Verify it can be parsed back
        parsed_solution = parse_dimacs_solution(dimacs_solution)
        print(f"Parsed back: {parsed_solution}")


def example6_pigeon_hole():
    """Example 6: Pigeon-hole problem in DIMACS."""
    print("\n" + "=" * 70)
    print("Example 6: Pigeon-Hole Problem (UNSAT)")
    print("=" * 70)

    # 4 pigeons into 3 holes (impossible)
    dimacs = """
    c Pigeon-hole: 4 pigeons into 3 holes
    c Variables: p_i_j = pigeon i in hole j
    c            p_0_0, p_0_1, p_0_2 (pigeon 0 in holes 0-2)
    c            p_1_0, p_1_1, p_1_2 (pigeon 1 in holes 0-2)
    c            etc.
    p cnf 12 22
    c Each pigeon must be in at least one hole
    1 2 3 0
    4 5 6 0
    7 8 9 0
    10 11 12 0
    c At most one pigeon per hole
    -1 -4 0
    -1 -7 0
    -1 -10 0
    -4 -7 0
    -4 -10 0
    -7 -10 0
    -2 -5 0
    -2 -8 0
    -2 -11 0
    -5 -8 0
    -5 -11 0
    -8 -11 0
    -3 -6 0
    -3 -9 0
    -3 -12 0
    -6 -9 0
    -6 -12 0
    -9 -12 0
    """

    print(dimacs)

    cnf = parse_dimacs(dimacs)
    print(f"\nProblem: {len(cnf.clauses)} clauses, {len(cnf.get_variables())} variables")

    print("\nSolving with CDCL...")
    from bsat import get_cdcl_stats
    solution, stats = get_cdcl_stats(cnf)

    if solution:
        print("SAT (unexpected!)")
    else:
        print("UNSAT (as expected - can't fit 4 pigeons into 3 holes)")
        print(f"\nCDCL Stats:")
        print(f"  Decisions: {stats.decisions}")
        print(f"  Conflicts: {stats.conflicts}")
        print(f"  Learned clauses: {stats.learned_clauses}")


def example7_roundtrip():
    """Example 7: Complete roundtrip (build → DIMACS → solve → solution)."""
    print("\n" + "=" * 70)
    print("Example 7: Complete Roundtrip")
    print("=" * 70)

    # 1. Build CNF programmatically
    print("\n1. Building CNF...")
    cnf = CNFExpression([
        Clause([Literal('a', False), Literal('b', False)]),
        Clause([Literal('b', True), Literal('c', False)]),
        Clause([Literal('a', True), Literal('c', True)])
    ])
    print(f"   CNF: {cnf}")

    # 2. Export to DIMACS
    print("\n2. Exporting to DIMACS...")
    dimacs_str = to_dimacs(cnf, comments=['Roundtrip example'])
    print(dimacs_str)

    # 3. Parse DIMACS
    print("3. Parsing DIMACS...")
    cnf2 = parse_dimacs(dimacs_str)
    print(f"   Parsed {len(cnf2.clauses)} clauses")

    # 4. Solve
    print("\n4. Solving...")
    solution = solve_sat(cnf2)
    print(f"   Solution: {solution}")

    # 5. Export solution
    print("\n5. Exporting solution to DIMACS...")
    sol_dimacs = solution_to_dimacs(solution)
    print(sol_dimacs)

    # 6. Verify
    print("6. Verifying solution...")
    print(f"   Valid: {cnf2.evaluate(solution)}")


def example8_competition_format():
    """Example 8: Working with SAT competition format."""
    print("\n" + "=" * 70)
    print("Example 8: SAT Competition Format")
    print("=" * 70)

    # Typical SAT competition file format
    dimacs = """
    c SAT Competition Instance
    c Instance: example-01.cnf
    c Source: Educational example
    c Author: BSAT
    c
    p cnf 10 15
    1 2 -3 0
    -1 -2 4 0
    3 -4 5 0
    -5 6 -7 0
    7 8 9 0
    -6 -8 10 0
    -9 -10 1 0
    2 -3 -6 0
    4 5 -8 0
    -1 7 9 0
    3 -5 -10 0
    -2 6 8 0
    -4 -7 2 0
    5 9 -1 0
    -3 10 -6 0
    """

    print(dimacs)

    cnf = parse_dimacs(dimacs)
    stats = {
        'variables': len(cnf.get_variables()),
        'clauses': len(cnf.clauses),
        'ratio': len(cnf.clauses) / len(cnf.get_variables())
    }

    print(f"\nInstance statistics:")
    print(f"  Variables: {stats['variables']}")
    print(f"  Clauses: {stats['clauses']}")
    print(f"  Ratio: {stats['ratio']:.2f}")

    print("\nSolving with CDCL...")
    from bsat import get_cdcl_stats
    solution, cdcl_stats = get_cdcl_stats(cnf)

    if solution:
        print(f"\nSAT")
        print(f"  Decisions: {cdcl_stats.decisions}")
        print(f"  Conflicts: {cdcl_stats.conflicts}")
        print(f"  Propagations: {cdcl_stats.propagations}")
        print(f"  Time: Fast!")
    else:
        print("\nUNSAT")


if __name__ == '__main__':
    example1_basic_dimacs()
    example2_generate_dimacs()
    example3_file_io()
    example4_solve_dimacs()
    example5_solution_export()
    example6_pigeon_hole()
    example7_roundtrip()
    example8_competition_format()

    print("\n" + "=" * 70)
    print("All DIMACS examples completed!")
    print("=" * 70)
